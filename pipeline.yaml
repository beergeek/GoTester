pipeline:
  name: LetsTryThisWithGo
  identifier: LetsTryThisWithGo
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: GitHubConnector
        repoName: GoTester
        build: <+input>
  stages:
    - stage:
        name: Build
        identifier: Build
        description: ""
        type: CI
        spec:
          caching:
            enabled: true
          cloneCodebase: true
          platform:
            os: Linux
            arch: Amd64
          runtime:
            type: Cloud
            spec: {}
          execution:
            steps:
              - step:
                  type: Run
                  name: Get Dependencies
                  identifier: Get_Dependencies
                  spec:
                    shell: Bash
                    command: |-
                      export PATH=$PATH:/usr/local/go/bin
                      wget https://go.dev/dl/go1.24.1.linux-amd64.tar.gz
                      rm -rf /usr/local/go
                      tar -C /usr/local -xzf go1.24.1.linux-amd64.tar.gz
              - step:
                  type: Run
                  name: Test
                  identifier: Test
                  spec:
                    shell: Bash
                    command: |-
                      export PATH=$PATH:/usr/local/go/bin
                      go get
                      go test -v .
              - step:
                  type: Run
                  name: Build
                  identifier: Build
                  spec:
                    shell: Bash
                    command: |-
                      export PATH=$PATH:/usr/local/go/bin
                      go build -o weatherservice .
              - step:
                  type: BuildAndPushDockerRegistry
                  name: Build and Push Docker Image
                  identifier: Build_and_Push_Docker_Image
                  spec:
                    connectorRef: DockerReg
                    repo: beergeek1679/weatherservice
                    tags:
                      - <+pipeline.sequenceId>
                      - latest
                    dockerfile: Dockerfile
    - stage:
        name: deploy-weatherservice
        identifier: deployweatherservice
        description: ""
        type: Deployment
        spec:
          deploymentType: Kubernetes
          service:
            serviceRef: weatherservice
          environment:
            environmentRef: weatherdevenv
            deployToAll: false
            infrastructureDefinitions:
              - identifier: harnessk8sinfra
          execution:
            steps:
              - stepGroup:
                  name: Canary Deployment
                  identifier: canaryDepoyment
                  steps:
                    - step:
                        name: Canary Deployment
                        identifier: canaryDeployment
                        type: K8sCanaryDeploy
                        timeout: 10m
                        spec:
                          instanceSelection:
                            type: Count
                            spec:
                              count: 1
                          skipDryRun: false
                    - step:
                        name: Canary Delete
                        identifier: canaryDelete
                        type: K8sCanaryDelete
                        timeout: 10m
                        spec: {}
              - stepGroup:
                  name: Primary Deployment
                  identifier: primaryDepoyment
                  steps:
                    - step:
                        name: Rolling Deployment
                        identifier: rollingDeployment
                        type: K8sRollingDeploy
                        timeout: 10m
                        spec:
                          skipDryRun: false
            rollbackSteps:
              - step:
                  name: Canary Delete
                  identifier: rollbackCanaryDelete
                  type: K8sCanaryDelete
                  timeout: 10m
                  spec: {}
              - step:
                  name: Rolling Rollback
                  identifier: rollingRollback
                  type: K8sRollingRollback
                  timeout: 10m
                  spec: {}
        tags: {}
        failureStrategies:
          - onFailure:
              errors:
                - AllErrors
              action:
                type: StageRollback